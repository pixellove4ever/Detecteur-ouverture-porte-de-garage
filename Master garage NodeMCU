//Bibliotheques
#include <ESP8266WiFi.h>//https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266WiFi/src/ESP8266WiFi.h
#include <stdlib.h>
#include <stdio.h>

//Constantes
#define LED D5 //GPIO 14 ou D5

//Parametres
String nom = "Master";
const char* ssid = "yourssid"; //SSID du réseau Wifi
const char* password = "yourpassword"; //Mot de passe du réseau Wifi

//Variables
bool sendCmd = false;
String slaveCmd = "0";
String slaveState = "0";


//Objects
WiFiServer server(80);
WiFiClient browser;
IPAddress ip(192, 168, 0, 80);
IPAddress gateway(192, 168, 0, 254);
IPAddress subnet(255, 255, 255, 0);

//Fonctions
void setup() {
 //Initialisation de la liaison Serie USB
 Serial.begin(115200);
 Serial.println(F("Initialisation du systeme"));
 //Initialisaton du wifi de l'ESP8266 
 WiFi.config(ip, gateway, subnet);       // On force l'utilisation d'une adresse IP fixe
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
   delay(500);//Attente 0.5sec
   Serial.print(F(".")); //Affichage en attendant la connexion
 }
 server.begin(); 
 Serial.println("");
 Serial.print(nom);
 Serial.print(F(" connecte au Wifi! IP address : http://")); Serial.println(WiFi.localIP()); // Affichage de l'adresse IP du master
 pinMode(LED, OUTPUT);// Déclaration de la LED comme une sortie
}
void loop() {
 clientRequest();
}
void clientRequest( ) { /* function clientRequest */
 ////Vérifie si le client est connecté
 WiFiClient client = server.available();
 client.setTimeout(50);
 if (client) {
   if (client.connected()) {
     //Print client IP address
     Serial.print(" IP du client - > ");Serial.println(client.remoteIP());
     String request = client.readStringUntil('\r'); //reception de la request du client
     
     if (request.indexOf("Slave0") == 0) {
       //En attente de la requete de l'esclave
       int index = request.indexOf(":");
       String slaveid = request.substring(0, index);
       slaveState = request.substring(request.indexOf("x") + 2, request.length());//extraction de la valeur envoyé par l'esclave
       if (slaveState == "0")  {
        digitalWrite(LED, LOW); //Eteindre la led si la porte est fermée
       }
       if (slaveState == "1")  {
         digitalWrite(LED, HIGH); //Allumer la led si la porte est ouverte
        }
       //client.print(nom);
       client.stop();                // terminer la connexion avec le client
     } else {
       client.flush();
       webpage(client);
     }
   }
 }
}

//Affichage de la page web
void webpage(WiFiClient browser) { /* function webpage */
 //Envoi de la page web ligne par ligne
 browser.println("HTTP/1.1 200 OK\n");
 browser.println("Content-Type: text/html");
 browser.println(""); //  do not forget this one
 browser.println("<!DOCTYPE HTML>");
 browser.println("<html>");
 browser.println("<head>");
 browser.println("<meta name='apple-mobile-web-app-capable' content='yes' />");
 browser.println("<meta name='apple-mobile-web-app-status-bar-style' content='black-translucent' />");
 browser.println("<meta http-equiv='refresh' content='5'/>"); //rafraichissement de la page toutes les 5 secondes
 browser.println("</head>");
 browser.println("<body style = ' background-color:#000000; color:white;'>");
 browser.println("<hr/><hr>");
 browser.println("<h1><center> La porte du garage est-elle ouverte ? </center></h1>");
 browser.println("<hr/><hr>");
 browser.println("<br><br>");
 browser.println("<br><br>");
 browser.println("<center>");
 browser.println("<table border='5'>");
 browser.println("<tr>");
 if (digitalRead(LED))
 {
   browser.print("<td>!!  Attention, la porte du garage est ouverte  !!</td>");
 }
 else
 {
   browser.print("<td>Porte du garage fermee</td>");
 }
 browser.println("<br />");
 browser.println("</tr>");
 browser.println("</table>");
 browser.println("</center>");
 browser.println("</html>");
 delay(1);
}
